/*

# Responsive Grid Sizes

Note: this will need to be modified if you update your grid units

Template: SGGridResponsiveInfo

Styleguide 2.1.1
*/

/*

#Responsive Grid Example

Template: SGGridResponsive

The responsive grid uses the fractions from the grid units section, but with modifiers
to specify which break point they should apply to.

Styleguide 2.1.2
*/

.pure-g--padding > [class*="pure-u"] {
	box-sizing: border-box;
	padding: 0 30px;
	letter-spacing: normal;
}

.pure-g--centered {
	text-align: center;

	> [class*="pure-u"]:not(.text--center) {
		margin-left: auto;
		margin-right: auto;
		text-align: left;

		@include respond(print) {
			margin: none;
		}
	}
}

// core grid
.pure-g {
	// IE fix
	display: flexbox;
	flex-flow: row wrap;
}

[class*="pure-u"] {
	display: inline-block;
	*display: inline;
	zoom: 1;
	letter-spacing: normal;
	word-spacing: normal;
	vertical-align: top;
	text-rendering: auto;
}

[class*="pure-pull"],
[class*="pure-push"] {
	position: relative;
}


/*

#Grid Units

Grid styling

Template: SGGrid

Styleguide 2.1.3
*/

/*

#Grid push/pull

To move columns around, we can use the pull and push classes. eg: `.pure-pull-1-5`,
`.pure-push-4-5`

Markup:
<div class="pure-g show-grid">
	<div class="pure-u-1-5 pure-push-2-5"> moved 2 cols to the right </div>
	<div class="pure-u-2-5 pure-pull-1-5"> moved 1 cols to the left </div>
	<div class="pure-u-2-5"> remains where it is </div>
</div>
<div class="pure-g show-grid">
	<div class="pure-u-1-5 pure-push-md-2-5"> moved 2 cols to the right @ md </div>
	<div class="pure-u-2-5 pure-pull-md-1-5"> moved 1 cols to the left @ md </div>
	<div class="pure-u-2-5"> remains where it is </div>
</div>

Styleguide 2.1.4
*/


// Generate our grid and all push/pull classes.
//
// Note: some base styles still come to us through pure, but we don't include
// any of the responsive versions
// $gridUnits and $breakpoints are defined in _var-breakpoints.scss
@each $breakpoint, $value in $breakpoints {
	@include respond($breakpoint) {

		@each $unit in $gridUnits {
			@for $i from 1 through $unit {

				$mediaPrefix: '-' + $breakpoint + '-';

				// remove the prefix for the base size
				@if $breakpoint == 'base' {
					$mediaPrefix: '-';
				}

				.pure-u#{$mediaPrefix}#{$i}-#{$unit} {
					width: (100% / $unit) * $i;
				}

				.pure-push#{$mediaPrefix}#{$i}-#{$unit} {
					left: (100% / $unit) * $i;
				}

				.pure-pull#{$mediaPrefix}#{$i}-#{$unit} {
					right: (100% / $unit) * $i;
				}

				$gcd: gcd($i, $unit); // get the greatest common diviser
				@if $gcd > 1 {

					$numerator: $i / $gcd;
					$denominator: $unit / $gcd;

					.pure-u#{$mediaPrefix}#{$numerator}-#{$denominator} {
						width: (100% / $unit) * $i;
					}

					.pure-push#{$mediaPrefix}#{$numerator}-#{$denominator} {
						left: (100% / $unit) * $i;
					}

					.pure-pull#{$mediaPrefix}#{$numerator}-#{$denominator} {
						right: (100% / $unit) * $i;
					}
				}
			}
		}
	}
}


/*

#Grid Column reverse

As an alternative to push/pull when you only need to perform a simple task
e.g if you would would like to have your sidebar on the left at desktop, but
beneath the content at mobile, you can use `pure-g-reverse-row` to reverse the order

Markup:
<div class="pure-g show-grid pure-g-reverse-row">
	<div class="pure-u-1-5"> Right </div>
	<div class="pure-u-4-5"> Left </div>
</div>
<div class="pure-g show-grid pure-g-md-reverse-row">
	<div class="pure-u-1-5"> Right @ md </div>
	<div class="pure-u-4-5"> Left @ md </div>
</div>

Styleguide 2.1.5
*/

@each $breakpoint, $value in $breakpoints {
	@include respond($breakpoint) {
		$mediaPrefix: '-' + $breakpoint + '-';

		// remove the prefix for the base size
		@if $breakpoint == 'base' {
			$mediaPrefix: '-';
		}

		.pure-g#{$mediaPrefix}reverse-row {
			flex-direction: row-reverse;
		}
	}
}
